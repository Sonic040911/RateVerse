<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.rateverse.mapper.TopicMapper">
    <!--  CRUD  -->
    <insert id="insertTopic" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO topic (title, description, user_id, created_at, updated_at)
        VALUES (#{title}, #{description}, #{userId}, NOW(), NOW())
    </insert>

    <update id="updateTopic">
        update topic set
            title = #{title},
            description = #{description},
            updated_at = NOW()
        where id = #{id}
    </update>

    <update id="updateTotalComments">
        UPDATE topic SET
            total_comments = #{totalComments},
            updated_at = NOW()
        WHERE id = #{topicId}
    </update>

    <update id="updateTotalRatings">
        UPDATE topic SET
            total_ratings = #{totalRatings},
            updated_at = NOW()
        WHERE id = #{topicId}
    </update>

    <delete id="deleteTopicById">
        DELETE FROM topic WHERE id = #{id}
    </delete>


    <!-- 查询 -->
    <select id="selectTopicByUserId" resultType="com.rateverse.bean.Topic">
        select * from topic where user_id = #{userId} order by created_at DESC
    </select>

    <select id="countTopicsByUserId" resultType="int">
        select count(*) from topic where user_id = #{userId}
    </select>

    <select id="searchTopicsByTitle" resultType="com.rateverse.bean.Topic">
        select * from topic where title like concat('%', #{keyword}, '%')
    </select>

    <!-- Topic和List<Item>的resultMap -->
    <resultMap id="TopicResultMapWithItems" type="com.rateverse.bean.Topic">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="user_id" property="userId"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="total_comments" property="totalComments"/>
        <result column="total_ratings" property="totalRatings"/>

        <!-- 关联的评分项（Item）-->
        <collection property="items" ofType="com.rateverse.bean.Item">
            <id column="item_id" property="id"/>
            <result column="topic_id" property="topicId"/>
            <result column="name" property="name"/>
            <result column="item_description" property="description"/>
            <result column="image_url" property="imageUrl"/> <!-- 添加 imageUrl 映射 -->
            <result column="average_rating" property="averageRating"/>
            <result column="item_total_ratings" property="totalRatings"/>
            <result column="item_total_comments" property="totalComments"/>
            <result column="item_created_at" property="createdAt"/>
            <result column="item_updated_at" property="updatedAt"/>
        </collection>
    </resultMap>

    <!-- Topic和User的ResultMap -->
    <resultMap id="TopicResultMapWithUser" type="com.rateverse.bean.Topic">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="totalComments" column="total_comments"/>
        <result property="totalRatings" column="total_ratings"/>
        <result property="userId" column="user_id"/>

        <!-- 关联 User -->
        <association property="user" javaType="com.rateverse.bean.User">
            <id property="id" column="user_id"/>
            <result property="username" column="username"/>
            <result property="email" column="email"/>
            <result property="passwordHash" column="password_hash"/>
            <result property="avatarUrl" column="avatar_url"/>
            <result property="createdAt" column="created_at"/>
            <result property="updatedAt" column="updated_at"/>
        </association>
    </resultMap>


    <!-- 主页点击单个Topic时用 (路径中携带着id，用id查询这个) -->
    <select id="selectTopicByIdWithUser" resultMap="TopicResultMapWithUser">
        SELECT
            t.*,
            u.id AS user_id, u.username, u.email, u.password_hash,
            u.avatar_url, u.created_at, u.updated_at
        FROM topic t
        LEFT JOIN user u ON t.user_id = u.id
        WHERE t.id = #{id}
    </select>


    <select id="selectAllByTime" resultMap="TopicResultMapWithItems">
        SELECT
            t.id, t.title, t.description, t.user_id,
            t.created_at, t.updated_at, t.total_comments, t.total_ratings,
            i.id AS item_id, i.topic_id, i.name, i.description AS item_description,
            i.image_url,  <!-- 添加 image_url 列 -->
            i.average_rating, i.total_ratings AS item_total_ratings,
            i.total_comments AS item_total_comments,
            i.created_at AS item_created_at, i.updated_at AS item_updated_at
        FROM `topic` t
        LEFT JOIN `item` i ON t.id = i.topic_id
        ORDER BY t.created_at DESC
    </select>

    <select id="selectAllByHeat" resultMap="TopicResultMapWithItems">
        SELECT
        t.id, t.title, t.description, t.user_id,
        t.created_at, t.updated_at, t.total_comments, t.total_ratings,
        i.id AS item_id, i.topic_id, i.name, i.description AS item_description,
        i.image_url,
        i.average_rating, i.total_ratings AS item_total_ratings,
        i.total_comments AS item_total_comments,
        i.created_at AS item_created_at, i.updated_at AS item_updated_at
        FROM (
        SELECT id, title, description, user_id, created_at, updated_at, total_comments, total_ratings
        FROM topic
        ORDER BY (
        SELECT COALESCE(SUM(i3.total_ratings) + SUM(i3.total_comments), 0)
        FROM item i3
        WHERE i3.topic_id = topic.id
        ) DESC, created_at DESC
        LIMIT #{pageSize} OFFSET #{offset}
        ) t
        LEFT JOIN (
        SELECT i1.*
        FROM item i1
        WHERE (
        SELECT COUNT(*)
        FROM item i2
        WHERE i2.topic_id = i1.topic_id
        AND i2.created_at > i1.created_at
        ) &lt; 3
        ) i ON t.id = i.topic_id
        ORDER BY (
        SELECT COALESCE(SUM(i3.total_ratings) + SUM(i3.total_comments), 0)
        FROM item i3
        WHERE i3.topic_id = t.id
        ) DESC, t.created_at DESC, i.created_at ASC
    </select>

    <select id="countTopics" resultType="long">
        SELECT COUNT(*) FROM topic
    </select>


    <select id="selectByKeywordTime" resultMap="TopicResultMapWithItems">
        SELECT
        t.id, t.title, t.description, t.user_id,
        t.created_at, t.updated_at, t.total_comments, t.total_ratings,
        i.id AS item_id, i.topic_id, i.name, i.description AS item_description,
        i.image_url,
        i.average_rating, i.total_ratings AS item_total_ratings,
        i.total_comments AS item_total_comments,
        i.created_at AS item_created_at, i.updated_at AS item_updated_at
        FROM `topic` t
        LEFT JOIN `item` i ON t.id = i.topic_id
        WHERE t.title LIKE CONCAT('%', #{keyword}, '%')
        OR t.description LIKE CONCAT('%', #{keyword}, '%')
        OR i.name LIKE CONCAT('%', #{keyword}, '%')
        OR COALESCE(i.description, '') LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY t.created_at
        <if test="order == 'ASC'">ASC</if>
        <if test="order == 'DESC'">DESC</if>
    </select>

    <select id="selectByKeywordHeat" resultMap="TopicResultMapWithItems">
        SELECT
        t.id, t.title, t.description, t.user_id,
        t.created_at, t.updated_at, t.total_comments, t.total_ratings,
        i.id AS item_id, i.topic_id, i.name, i.description AS item_description,
        i.image_url,
        i.average_rating, i.total_ratings AS item_total_ratings,
        i.total_comments AS item_total_comments,
        i.created_at AS item_created_at, i.updated_at AS item_updated_at
        FROM `topic` t
        LEFT JOIN (
        SELECT i2.*
        FROM `item` i2
        WHERE (
        SELECT COUNT(*)
        FROM `item` i3
        WHERE i3.topic_id = i2.topic_id
        AND i3.created_at > i2.created_at
        ) &lt; 3
        ) i ON t.id = i.topic_id
        WHERE t.title LIKE CONCAT('%', #{keyword}, '%')
        OR t.description LIKE CONCAT('%', #{keyword}, '%')
        OR i.name LIKE CONCAT('%', #{keyword}, '%')
        OR COALESCE(i.description, '') LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY (
        SELECT COALESCE(SUM(i4.total_ratings) + SUM(i4.total_comments), 0)
        FROM `item` i4
        WHERE i4.topic_id = t.id
        ) DESC, t.created_at DESC
    </select>


    <select id="countTopicLikesByUserId" resultType="int">
        SELECT COALESCE(SUM(cl.id), 0)
        FROM topic t
        JOIN item i ON t.id = i.topic_id
        JOIN comment c ON i.id = c.item_id
        JOIN comment_like cl ON c.id = cl.comment_id
        WHERE t.user_id = #{userId} AND cl.action_type = 'LIKE'
    </select>

    <select id="countTopicCommentsByUserId" resultType="int">
        SELECT COALESCE(SUM(t.total_comments), 0) FROM topic t WHERE t.user_id = #{userId}
    </select>

    <select id="countTopicRatingsByUserId" resultType="int">
        SELECT COALESCE(SUM(t.total_ratings), 0) FROM topic t WHERE t.user_id = #{userId}
    </select>


    <!-- Topic和最热门Item的resultMap -->
    <resultMap id="TopicResultMapWithTopItem" type="com.rateverse.bean.Topic">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="user_id" property="userId"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="total_comments" property="totalComments"/>
        <result column="total_ratings" property="totalRatings"/>
        <!-- 关联的最热门Item -->
        <association property="topItem" javaType="com.rateverse.bean.Item">
            <id column="item_id" property="id"/>
            <result column="topic_id" property="topicId"/>
            <result column="name" property="name"/>
            <result column="item_description" property="description"/>
            <result column="image_url" property="imageUrl"/>
            <result column="average_rating" property="averageRating"/>
            <result column="item_total_ratings" property="totalRatings"/>
            <result column="item_total_comments" property="totalComments"/>
            <result column="item_created_at" property="createdAt"/>
            <result column="item_updated_at" property="updatedAt"/>
        </association>
    </resultMap>

    <!-- 查询用户创建的Topic，按热度排序，包含最热门Item，最多3个 -->
    <select id="selectUserTopicsByTime" resultMap="TopicResultMapWithTopItem">
        SELECT
        t.id, t.title, t.description, t.user_id,
        t.created_at, t.updated_at, t.total_comments, t.total_ratings,
        i.id AS item_id, i.topic_id, i.name, i.description AS item_description,
        i.image_url, i.average_rating,
        i.total_ratings AS item_total_ratings,
        i.total_comments AS item_total_comments,
        i.created_at AS item_created_at, i.updated_at AS item_updated_at
        FROM topic t
        LEFT JOIN (
        SELECT i2.*
        FROM item i2
        WHERE i2.id = (
        SELECT id
        FROM item i3
        WHERE i3.topic_id = i2.topic_id
        ORDER BY (i3.total_ratings + i3.total_comments) DESC, i3.created_at DESC
        LIMIT 1
        )
        ) i ON t.id = i.topic_id
        WHERE t.user_id = #{userId}
        ORDER BY t.created_at DESC
    </select>

    <select id="selectTopicById" resultType="com.rateverse.bean.Topic">
        select * from topic where id = #{id}
    </select>

</mapper>